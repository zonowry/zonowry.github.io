<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DDD on Zonowry</title><link>https://blog.zonowry.com/tags/ddd/</link><description>Recent content in DDD on Zonowry</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>zonowry</copyright><lastBuildDate>Thu, 18 Jan 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.zonowry.com/tags/ddd/index.xml" rel="self" type="application/rss+xml"/><item><title>如何写一手容易维护的代码</title><link>https://blog.zonowry.com/posts/easy_ddd/</link><pubDate>Thu, 18 Jan 2024 00:00:00 +0000</pubDate><guid>https://blog.zonowry.com/posts/easy_ddd/</guid><description>&lt;img src="https://blog.zonowry.com/posts/easy_ddd/1.webp" alt="Featured image of post 如何写一手容易维护的代码" />&lt;h2 id="免责声明">免责声明
&lt;/h2>&lt;p>程序员对抽象、设计可能会有不同的习惯。同样一个功能有人用发布订阅，有人用消息队列，他们都有自己的一套设计理念。最终是谁能说服谁的问题，哪一种方式都不是绝对正确的，就像本文一样。&lt;/p>
&lt;p>内容有点偏意识流，不过总结的都是些很简单的东西。文中提到的诸多“本质”，应该会再写一篇来举例说明吧。&lt;/p>
&lt;h2 id="人类智商受限">人类智商受限
&lt;/h2>&lt;p>人类的智商难以理解庞大而复杂的软件系统，所以我们尝试用抽象来设计软件，设法以人类的智商也可以理解庞大的软件系统。&lt;/p>
&lt;h3 id="抽象是什么">抽象是什么
&lt;/h3>&lt;p>管理自己的磁盘时，都会建立类似 &lt;code>Work、Software、Temp、Repo&lt;/code> &amp;hellip;之类的文件夹。怎么分类文件夹最合理在这里不重要，重要的是分类文件夹前，肯定会进行的简单的&lt;strong>设计&lt;/strong>。这个设计的思考过程我认为就是正在抽象。&lt;/p>
&lt;p>举个不是很恰当的例子。我们不会为某一个 IDE 单独建立文件夹，来存放用它开发的代码文件。例如 &lt;code>Intellij Projects&lt;/code>、&lt;code>Visual Studio Projects&lt;/code> 。而是会尝试建立 &lt;code>Projects&lt;/code>、&lt;code>Repo&lt;/code>、&lt;code>Workspace&lt;/code> 存放代码文件。这期间我们就是在抽象，把文件和具体的软件分离开，思考了这些文件的本质是”代码文件“，而非”某款软件的文件“。&lt;/p>
&lt;p>抽象本质就是简化信息，是为了降低复杂度、是控制软件系统混乱程度的外在做功。&lt;/p>
&lt;h3 id="从三层架构开始思考">从三层架构开始思考
&lt;/h3>&lt;p>三层架构是一个很简单的，但抽象程度很高的模式。它可以解释大多数程序的组成：”有对外交互、有核心逻辑、有数据读写“。这就是它的高度抽象，把信息简化到了极致，所有程序都可以遵循三层架构模式写出来。三层本质是规范了代码边界，划分出三层边界：&lt;/p>
&lt;ul>
&lt;li>用户交互层：接收“用户”的输入，向“用户”输出处理结果。&lt;/li>
&lt;li>核心逻辑层：只负责程序的核心“算法”，如何处理数据。&lt;/li>
&lt;li>数据交互层：妥协层，内存实现不了持久化，抽象出一个数据读写层代替内存。&lt;/li>
&lt;/ul>
&lt;p>代码设计的前期阶段，如何思考出一个模块的组成部分？三层架构给了我们一个优秀的示范。不需要思考功能的太多细节，&lt;strong>全力以赴的简化功能的细节，简单直接的阐述功能的本质&lt;/strong>。&lt;/p>
&lt;p>不过三层架构太抽象了，就像将「用户注册」抽象成「新增数据」，相当于没有细节。如果只从三层中学到了“把代码按照交互、核心、读写划分”的话，那实现细节还是会剪不断理还乱。只会套用三层架构范式，而不去思考功能本质的软件最终会难以维护，也许是屎山多是三层架构的原因（风评被害）。&lt;/p>
&lt;h3 id="最小人力成本">最小人力成本
&lt;/h3>&lt;p>简单的东西却蕴藏大设计，架构大道反而在最简单的三层之中。只要适当的简化信息，边界划分的足够合适，架构最终会形成一个个&lt;strong>聚合&lt;/strong>，开始有了&lt;strong>领域驱动&lt;/strong>的味道。可难点就是&lt;strong>边界&lt;/strong>如何划分的足够合适，信息如何简化才算符合抽象。&lt;/p>
&lt;p>因为现实世界复杂的，软件系统的复杂度是不断熵增的。不变的设计总会有一天会遇到冲击。总会遇见两难抉择：重构还是硬怼？&lt;/p>
&lt;p>例如我曾碰见的 &lt;code>getRowDef(rowIndex)&lt;/code> ，起初这个方法是为了&lt;strong>获取数据的类型定义，以此解析并转换数据内容&lt;/strong>。但后来 Excel 变的很复杂，我们需要根据内容来推断列定义。所以方法变成了 &lt;code>getRowDef(rowIndex, rowReader, totalLines, prevRowDef...)&lt;/code>，多了很多参数，以便在方法内部推断此行的类型定义。变成了让人困惑的屎山代码：&lt;strong>获取数据的类型定义，需要先读取数据，然后再拿定义去转换数据&lt;/strong>。理念上有了冲突，让人产生了困惑。但还是选择了硬怼，因为这样改动最&lt;strong>省力&lt;/strong>，写好注释后也能让人理解。&lt;/p>
&lt;p>看似上面例子重构一下成本也不大，但其实功能本质已经变了。也就是设计理念变了。类型定义和数据内容的关系变了。重构就要从类型定义和数据内容这种基层代码改起。结合实际工期限制，适当的抽象减轻维护难度就可以了。如果碰到设计瑕疵就要重构，反而会给自己增加压力，延后工期，浪费人力~~，失去工作~~。&lt;/p>
&lt;p>《架构整洁之道》里提到：==“软件架构的终极⽬标是，⽤最⼩的⼈⼒成本来满⾜构建和维护该系统的需求”==。遇到设计瑕疵时，有重构的想法时，需要慎重思考自己新的设计，减少的维护复杂度和花费的精力相比是否值得。&lt;/p>
&lt;h2 id="代码设计">代码设计
&lt;/h2>&lt;p>百科对抽象的解释是「找出事物的本质，剥离其它表象、杂质，最终形成一个&lt;strong>概念&lt;/strong>」。&lt;/p>
&lt;h3 id="抽象的本质">抽象的本质
&lt;/h3>&lt;p>务实的看，抽象可以帮助我们简化代码，封装复用、继承多态、接口声明。都是在抽象代码，以形成“某某功能”的概念，实现细节则是在具象（补完）这个&lt;strong>概念&lt;/strong>。这个概念就是前文一直在提到的功能本质、设计理念等抽象的词汇。&lt;/p>
&lt;p>使用第三方库时，遇到一些不清楚的方法，一般只需要在源码中找几个接口定义（注释）看看，或者阅读官网文档的 &lt;code>Api Reference&lt;/code> 就能理解。这些框架都是作者的匠心之作，单从它们的版本发布就能略知一二，它们的更新维护通常都是非 &lt;code>breaks&lt;/code> 的。屎山才会经常不停的重构，导致 &lt;code>breaks&lt;/code>。&lt;/p>
&lt;p>这些框架怎么做到的？虽然框架支持的特性多样且复杂。但框架作者依靠抽象简化了信息，思考本质。不论是修复 bug，还是新增功能，作者只需要确保框架的&lt;strong>概念&lt;/strong>还是不变的。这里的&lt;strong>概念&lt;/strong>相当于其抽象的出发点，或者本质。每次维护、更新只需要确定这个&lt;strong>本质&lt;/strong>不会发生改变。&lt;/p>
&lt;h3 id="信息隐藏">信息隐藏
&lt;/h3>&lt;p>理解抽象，彻底的理解什么是“简化信息”很关键。并非是单纯的精简代码，而是一种形意拳。精简代码只是其形。意在降低复杂度。&lt;/p>
&lt;p>我在《代码大全》里看到&lt;strong>信息隐藏&lt;/strong>时，意识到到这个东西可以和&lt;strong>简化信息&lt;/strong>联系起来，更直观的解释&lt;strong>抽象&lt;/strong>。我们降低复杂度、抽象代码、简化信息。最终达成的效果就是&lt;strong>隐藏&lt;/strong>了代码所蕴含的&lt;strong>信息&lt;/strong>。&lt;/p>
&lt;p>结合一段代码，有点极端但简单地例子。直观的看一下信息隐藏是什么。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// domain
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">User&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">fun&lt;/span> &lt;span class="nf">login&lt;/span>&lt;span class="p">():&lt;/span> &lt;span class="n">Boolean&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 核心逻辑：只有周一允许登录
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">today&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="n">周一&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">true&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">false&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// service
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">fun&lt;/span> &lt;span class="nf">loginService&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">user&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">getUser&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(!&lt;/span>&lt;span class="n">user&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">login&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 错误的
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;登录失败，失败原因：只有周一才能登录&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 正确的
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;登录失败&amp;#34;&lt;/span> &lt;span class="c1">// “我”不知道失败原因，因为原因被“隐藏”了
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>例子中，代码的边界体现在「今天是周一才能登录系统」这个核心逻辑。服务层&lt;strong>不应该&lt;/strong>知道这个信息。只应根据业务对象的返回值来做判断，或者说&lt;strong>我们隐藏了这个信息&lt;/strong>。&lt;/p>
&lt;p>为什么”告知用户“「只有周一才能登录」的写法是错误的？因为核心逻辑层只返回了 false，没有说原因。服务层及更上层理应不知道原因，即使所有代码都是同一个程序员写的。&lt;/p>
&lt;p>程序员应该克制，或者说欺骗自己。这样才能保持住代码的边界，即使告知用户「只有周一才能登录」是更好的用户体验，仅从代码设计来看，隐藏信息是首要的。&lt;/p>
&lt;p>简单来说就是，“我”忘记了核心逻辑，业务对象只返回了一个 &lt;code>Boolean&lt;/code>，只包含了“登录是否成功”这条信息。这样“我”的做法是「登录失败，但我不知道原因」就很合理了。&lt;/p>
&lt;p>当然上边的例子有点极端。来点实际的例子，就像我们写 &lt;code>java&lt;/code>，不用去理解 &lt;code>public void main()&lt;/code> 背后发生了什么，只需要知道这是程序的主入口。这就是设计 &lt;code>java&lt;/code> 语言的人，隐藏了信息，我们只需要往 &lt;code>main&lt;/code> 方法里浇灌&lt;del>屎山&lt;/del>代码就行了，降低不少复杂度。&lt;/p>
&lt;p>简化信息，降低复杂度的本质，似乎就是信息隐藏。&lt;/p>
&lt;h3 id="依赖接口">依赖接口
&lt;/h3>&lt;p>再来理解依赖接口而非实现就很简单了，接口就是隐藏信息的集大成者，如果没有 &lt;code>go to implementation&lt;/code>，就是在天然的在隐藏信息，达成：&lt;/p>
&lt;ul>
&lt;li>这个接口的实现是哪个同事写的？
&lt;ul>
&lt;li>我不在意（除非要找个人背锅了）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>这个接口的实现具体做了什么，怎么写的，用到了什么技术？
&lt;ul>
&lt;li>关我什么事。我只关注它可以达成什么效果，我要给它什么参数，它返回了什么。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>接口调用出错了，这可咋办？
&lt;ul>
&lt;li>确认调用方式没问题。那抽空修复、替换下实现吧。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>就算脱离了接口实现，软件代码也能被理解。这样说明了简化信息很成功，复杂度理所应当的被降低了。&lt;/p>
&lt;h2 id="边界与约定">边界与约定
&lt;/h2>&lt;p>想要理解&lt;strong>领域驱动&lt;/strong>，理解&lt;strong>限界上下文&lt;/strong>必不可少。直接看&lt;strong>限界上下文&lt;/strong>会感觉很抽象。不过通过&lt;strong>信息隐藏&lt;/strong>，可以很简单的理解、接纳限界上下文的&lt;strong>理念&lt;/strong>。&lt;/p>
&lt;h3 id="约束与限界上下文">约束与限界上下文
&lt;/h3>&lt;p>&lt;strong>边界&lt;/strong>像是一种&lt;strong>约束&lt;/strong>，只允许边界外知道边界内&lt;strong>泄漏&lt;/strong>出的信息。例如登录失败的原因，只泄漏了 &lt;code>True&lt;/code> 或 &lt;code>False&lt;/code>，真正的登录失败原因，被我们隐藏起来了。&lt;/p>
&lt;p>这种隐藏方式和我们在面向对象代码语言里的 &lt;code>private&lt;/code> &lt;strong>私有&lt;/strong>特性密切相关。例如边界内的业务对象的 &lt;code>set&lt;/code> 方法通常是&lt;strong>私有&lt;/strong>的，不对外&lt;strong>公开&lt;/strong>。这就是一种约束、或者隐藏。边界外只允许获取边界内&lt;strong>公开&lt;/strong>的信息。&lt;/p>
&lt;p>构成&lt;strong>边界内/边界外&lt;/strong>的&lt;strong>约束&lt;/strong>就可以理解为限界上下文。上下文内一个领域、一个聚合，都是一些很纯粹、完整的业务信息，因为他们被&lt;strong>约束&lt;/strong>了，不会泄漏核心信息，不会被外界影响。&lt;strong>上下文外&lt;/strong>则是服务层，应用层，包含诸多的技术细节等“噪音信息”。&lt;/p>
&lt;h3 id="约定先于配置">约定先于配置
&lt;/h3>&lt;p>&lt;strong>约定大于配置&lt;/strong>你可能在某些技术框架里看到过这个理念，可以理解为一种更轻量的&lt;strong>约束&lt;/strong>。这种&lt;strong>约定&lt;/strong>随处可见：&lt;/p>
&lt;ul>
&lt;li>在 &lt;code>Spring&lt;/code> 中，我们依赖注入一个 &lt;code>@Resource&lt;/code> 。一般是不会特意&lt;strong>配置&lt;/strong> &lt;code>name&lt;/code> 的 。而是采用默认的&lt;strong>约定&lt;/strong>，即按属性名称注入。&lt;/li>
&lt;li>&lt;code>Asp Net Core&lt;/code> 会约定文件夹结构，如 &lt;code>Controller&lt;/code>、&lt;code>Views&lt;/code>&amp;hellip; &lt;code>HomeController.Index()&lt;/code> 会被”翻译“为 &lt;code>/Home/Index&lt;/code> 路由等。&lt;/li>
&lt;/ul>
&lt;p>或者更通用的一种约定，客户端调用后端 &lt;code>REST&lt;/code> 规范接口时，一般没有强制性的&lt;strong>约束&lt;/strong>。意味着客户端无法确定接口的输入输出结构。这种情况多靠程序猿们之间的&lt;strong>约定&lt;/strong>，如文档注释，甚至是口头传达。&lt;/p>
&lt;p>这种&lt;strong>约定&lt;/strong>看似需要我们多记住一些规则，增加了心智负担。但反过来想，如果没有这些约定，我们要做的工作是不是会更复杂，要显示配置很多东西，引入更多的技术框架，如 &lt;code>Swagger&lt;/code>、&lt;code>Spring XML Configuration&lt;/code>&amp;hellip;&lt;/p>
&lt;p>例子说的太多，有点偏上层应用了。回到&lt;strong>约定&lt;/strong>的抽象意义。有时我们只想为特定的服务公开一些领域内的能力，但不可避免地泄漏了这部分能力给所有的服务，此时我们会定下&lt;strong>约定&lt;/strong>：在注释里写上“只允许在 &lt;code>XXXXService&lt;/code> 内使用此方法，所有程序员必须遵守此约定“。这条约定就成为了&lt;strong>边界&lt;/strong>的一部分，为功能的抽象边界填砖加瓦。&lt;/p>
&lt;p>总之，这些&lt;strong>约定&lt;/strong>也可以形成&lt;strong>边界&lt;/strong>。&lt;/p>
&lt;h2 id="后言">后言
&lt;/h2>&lt;p>受限于个人表达水平以及技术尚未炉火纯青。我只能分享这点个人理解了。然后推荐看些 &lt;code>DDD&lt;/code> 相关的文章，就算不用，知道 &lt;code>DDD&lt;/code> 中的诸多概念后，对写一手容易维护的代码会有很大的帮助。&lt;/p></description></item></channel></rss>